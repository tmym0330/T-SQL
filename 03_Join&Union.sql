-- Mai Tra My 

-- 1.1 Retrieve customer orders
-- As an initial step towards generating the invoice report, 
-- write a query that returns the company name from the SalesLT.Customer table, 
-- and the sales order ID and total due from the SalesLT.SalesOrderHeader table. 

--> Show các khách hàng có đơn hàng -> Inner
SELECT CompanyName, SalesOrderID, TotalDue
FROM  SalesLT.Customer AS Cus
INNER JOIN SalesLT.SalesOrderHeader AS Ord
ON Cus.CustomerID = Ord.CustomerID

-- 1.2 Retrieve customer orders with addresses
-- Extend your customer orders query to include the Main Office address for each customer, 
-- including the full street address, city, state or province, postal code, 
-- and country or region
-- Tip: Note that each customer can have multiple addressees in the SalesLT.Address table, 
-- so the database developer has created the SalesLT.CustomerAddress table to enable a many-to-many relationship between customers and addresses. 
-- Your query will need to include both of these tables, and should filter the results so that only Main Office addresses are included

-- Lấy thông tin kh có đặt hàng -> cus + addr + cus_add + salesheader
SELECT CompanyName
    , SalesOrderID
    , TotalDue
    , AddressLine1
    , City
    , StateProvince
    , CountryRegion
    , PostalCode
FROM  SalesLT.Customer AS Cus  -- có thể bỏ Cus vì salesOrderHeader có cusID rồi
INNER JOIN SalesLT.SalesOrderHeader AS Ord
ON Cus.CustomerID = Ord.CustomerID
LEFT JOIN SalesLT.CustomerAddress AS Cus_add
ON Cus_add.CustomerID = Ord.CustomerID
LEFT JOIN SalesLT.Address AS addr
ON Cus_add.AddressID = addr.AddressID
WHERE Cus_add.AddressType = 'Main Office'



-- Xuất phát từ table đơn hàng → JOIN AddressCustomer tìm AddressID —> JOIN Address lấy full thông địa chỉ 
  
 -- Task 2: Retrieve customer data
-- As you continue to work with the Adventure Works customer, product and sales data, you must create queries for reports that have been requested by the sales team.
  
-- Retrieve a list of products
-- ○ A sales manager needs a list of ordered products with more information. 
-- You must write a query that returns a list of product name (is generated by the string preceded by the '-' character (example: HL Road Frame) ),
--  only started selling in 2006, Product model name contains "Road", CategoryName contains "Bikes" and  ListPrice value with integer part equal to 2443

-- —-> Xác định đâu là những product dc ordered ? —> bổ sung thêm các thông tin : name, sellstartdate , model name, category name 

SELECT 
    DISTINCT Pro.Name
    , SUBSTRING(Pro.Name, 1, CHARINDEX('-', Pro.Name) - 1) AS ProductName
    , SellStartDate
    , model.Name as ModelName
    , cat.Name as CategoryName
FROM  SalesLT.Product AS Pro
INNER JOIN SalesLT.SalesOrderDetail AS Ord
ON Pro.ProductID = Ord.ProductID
LEFT JOIN SalesLT.ProductModel AS model
ON model.ProductModelID = Pro.ProductModelID
LEFT JOIN SalesLT.ProductCategory AS cat
ON cat.ProductCategoryID = Pro.ProductCategoryID
WHERE 
    ROUND(ListPrice, 0) = 2443 AND
    Year(SellStartDate) >= 2006 AND
    model.Name LIKE '%Road%' AND
    cat.Name LIKE '%Bikes'


-- PART 2
-- 1.1 Retrieve a report that includes the following information: customer_id, transaction_id, 
-- scenario_id, transaction_type, sub_category, category. These transactions must meet the following conditions: 
-- Were created in Jan 2019
-- Transaction type is not payment

SELECT customer_id
    , transaction_id
    , trans.scenario_id
    , transaction_type
    , sub_category
    , category
FROM dbo.fact_transaction_2019 AS trans
LEFT JOIN dbo.dim_scenario AS sce
ON trans.scenario_id = sce.scenario_id
WHERE transaction_type != 'Payment'
    AND MONTH(transaction_time) = 1

-- nên left join để giữ toàn bộ data gốc (nhỡ có đơn mà chưa cập nhật thông tin địa chỉ... 
--> miss mất, có thể tính sai doanh thu)



-- 1.2 Retrieve a report that includes the following information: customer_id, transaction_id, scenario_id, transaction_type,
--  category, payment_method. These transactions must meet the following conditions: 
-- Were created from Jan to June 2019
-- Had category type is shopping
-- Were paid by Bank account


SELECT customer_id
    , transaction_id
    , trans.scenario_id
    , transaction_type
    , category
    , payment_method
FROM dbo.fact_transaction_2019 AS trans
LEFT JOIN dbo.dim_scenario AS sce
ON trans.scenario_id = sce.scenario_id
LEFT JOIN dbo.dim_payment_channel AS channel
ON trans.payment_channel_id = channel.payment_channel_id
-- WHERE transaction_time >= '2019-01-01 00:00:00' AND transaction_time < '2019-07-01 00:00:00'
WHERE MONTH(transaction_time) < 7
    AND category = 'Shopping'
    AND payment_method = 'Bank account'


-- OPTIONAL
-- 2.1.
-- cách 1

SELECT * 
FROM fact_transaction_2020 AS fact_20
WHERE promotion_id = '0'
    AND customer_id in
                        (SELECT customer_id
                        FROM fact_transaction_2019 as fact_19
                        left join dim_scenario as sce
                            on fact_19.scenario_id = sce.scenario_id
                            where promotion_id <> '0' and sub_category = 'Electricity'
                            and MONTH(transaction_time) = 1)

